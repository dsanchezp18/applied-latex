---
title: Applied \LaTeX \ for Researchers
institute: Laboratorio de Investigación para el Desarrollo del Ecuador
author: Daniel Sánchez Pazmiño, MA
date: 2025-02-01
theme: berlin
date-format: "MMMM YYYY"
format: beamer
incremental: false
fig-align: center
fontsize: 10pt
include-in-header:
    - text: |
        \setbeamercolor{background canvas}{bg=white}
        \setbeamertemplate{caption}[numbered]
        \usecolortheme[named=black]{structure}
        \usepackage{tikz}
        \usepackage{pgfplots}
knitr:
    opts_chunk: 
      echo: true
      message: false
      warning: false
---

```{r}
#| label: setup
library(tidyverse)
library(modelsummary)
library(knitr)
library(kableExtra)
```

# Math Mode Revisited

## Math Mode Revisited

- Math mode is arguably \LaTeX's most powerful feature
  - However, its syntax often takes some time to master
  
- Fortunately, tools have been developed to help users write \LaTeX \ code more easily

- In this section, we will explore some of these tools

## Using AI

- Never ignore AI in your workflows
    - AI will not replace you, someone who knows how to use it will

- ChatGPT can help you with any sort of text generation or syntax question
  - Ask it to generate an equation in \LaTeX \ for you
  - Alternatively, you may feed it a picture of an equation and ask it to generate the \LaTeX \ code for you
  
- Writefull AI is Overleaf's own AI assistant
  - Cheaper than ChatGPT, but still not free

- Check out [There's an AI for That](https://www.theresanaiforthat.com/) for more AI tools
  - A quick search yields several other tools, such as LaText AI.

## Codecogs

- [Codecogs](https://editor.codecogs.com/) is a free online \LaTeX \ equation editor
  
- Following a more "click and drag" approach, it is a good tool for beginners
  - Much like Overleaf's equation editor, you can click on symbols to add them to your equation
  - It also has a "Copy to Clipboard" button, which makes it easy to paste the equation into your document

## Mathpix

- Mathpix is one of the best tools for converting images of equations into \LaTeX \ code
  
- Available as a desktop app, you can take a screenshot of an equation and Mathpix will convert it into \LaTeX \ code
  - It also has a mobile app, which is useful for taking pictures of equations in textbooks

- Without spending any money, it will allow you to convert a limited number of equations per month
  - However, the paid version is not expensive
  
## Word Equations

- If for any reason you need to write a Word document with complex equations, you can actually write the equations in \LaTeX \ and then convert them to Word format

- This will require you to turn on the "LaTeX" option in the Equation tab, rather than the "Unicode" option.

# Creating Bibliographies

## Creating Bibliographies

- The bibliography or reference list is a crucial part of any academic paper.

- In \LaTeX, you can create a bibliography using several different packages
  - `natbib`, `biblatex`, and `apacite` are some of the most popular
  - Each package has its own syntax and features

- In this section, we will focus on `biblatex`, which is the most modern and flexible of the three
  - The workflow is similar to referencing in Quarto/RMarkdown
  
## Where to store your bibliography

- You can create a bibliography in \LaTeX on your own, but it is much easier to use a reference manager
  - Zotero, Mendeley, and EndNote are some of the most popular reference managers

- Zotero is free and open-source, and it has a plugin for Word and LibreOffice
  - It also has a plugin for Google Docs, which is useful for collaborative writing
  - Here, we will focus on Zotero

- You can add references to Zotero using the Chrome add-on, or by manually entering them
  
## Loading the package into \LaTeX

- To use `biblatex`, you need to load the package in the preamble of your document
  - You also need to specify the style of the bibliography
  - The most common styles are `apa`, `mla`, and `chicago`

- A very good guide on citation is on the Overleaf website
  - [Bibliography management in LaTeX](https://www.overleaf.com/learn/latex/Bibliography_management_in_LaTeX)
  - [Bibliography management with biblatex](https://www.overleaf.com/learn/latex/Bibliography_management_with_biblatex)

## Adding the bibliography package `biblatex`

```latex
\usepackage[style=apa]{biblatex}
```

- The `style` option specifies the style of the bibliography
  - The `apa` style is based on the American Psychological Association's citation style
  - You can find a list of all the available styles in the `biblatex` documentation
- You also need to specify the `.bib` file that contains your references

## The `.bib` file

- The `.bib` file is a plain text file that contains all the references you want to include in your bibliography
  - Each reference is stored in a separate entry
  - The format of the entries is specified by the `biblatex` package
- 
- It follows a \LaTeX-like syntax, with each entry starting with an `@` symbol
  - The type of the entry is specified after the `@` symbol
  - The fields of the entry are enclosed in curly braces `{}`

- Don't try to write the `.bib` file by hand!
  - Zotero can export your references to a `.bib` file
  - You only need to put it in the same folder as your `.tex` file or upload it to Overleaf

## The `.bib` file

```latex
@article{einstein,
  author = {Albert Einstein},
  title = {Zur Elektrodynamik bewegter K{\"o}rper},
  journal = {Annalen der Physik},
  volume = {322},
  number = {10},
  pages = {891--921},
  year = {1905},
  publisher = {Wiley-VCH},
  doi = {10.1002/andp.200510497}
}
```

## Adding the bibliography file

```latex
\addbibresource{references.bib}
```

- The `\addbibresource` command specifies the `.bib` file that contains your references
  - You need to put the `.bib` file in the same folder as your `.tex` file or upload it to Overleaf
  - The file extension `.bib` is optional
- You can add multiple `.bib` files to your document
  - Just use the `\addbibresource` command multiple times
- The `\printbibliography` command prints the bibliography in your document

## Adding the bibliography

```latex
\printbibliography
```

- The `\printbibliography` command prints the bibliography in your document
  - You can specify the title of the bibliography by passing an argument to the command
  - You can also filter the bibliography by passing options to the command
  - The options are specified in square brackets `[]`

## Citation commands

- To include a citation in your document, you need to use the `\cite` command
  - The `\cite` command takes the key of the reference you want to cite as an argument
  - You can cite multiple references by separating the keys with commas
  - The `\cite` command prints the citation in the text and adds the reference to the bibliography

## Citation commands

```latex
\cite{einstein}
```

- The `\cite` command takes the key of the reference you want to cite as an argument
  - You can cite multiple references by separating the keys with commas
  - The `\cite` command prints the citation in the text and adds the reference to the bibliography
- The `\textcite` command is similar to the `\cite` command, but it prints the author's name in the text
- The `\parencite` command is similar to the `\cite` command, but it adds parentheses around the citation

## Citation commands

```latex
\textcite{einstein} showed that \ldots 

\parencite{einstein}

\cite{einstein}

\cite{einstein,dirac}

\cite{einstein,dirac,bohr}
```

# Exporting from statistical software to \LaTeX

## Exporting from statistical software to \LaTeX

- If you are using statistical software to analyze your data, you can export the results to \LaTeX
  - This is useful if you want to include tables, figures, or other output in your document
  - Most statistical software packages have built-in support for exporting to \LaTeX

- Here, we will focus on how to export tables from R and Stata to \LaTeX
  - Both have packages that make it relatively easy to export tables to \LaTeX

# The export environment in R

## Exporting tables from R

- Many options exist for exporting tables from R to \LaTeX
  - `stargazer` is likely the most known package for exporting tables to \LaTeX
  - However, `modelsummary` is a more modern and flexible package

- Other packages, such as `kableExtra`, `xtable`, and `huxtable`, can also be used to export tables to \LaTeX
  - `kableExtra` is particularly useful for creating complex tables with formatting
  - `gt` is another great package for creating tables in R
  - `flextable` is particularly useful for Word documents (we covered it in our RMarkdown lecture)

## An example with `stargazer`

- We export the `mtcars` dataset to a \LaTeX \ table using `stargazer`

```{r}
#| label: stargazer
#| echo: true
#| eval: false
library(stargazer)

data(mtcars)

stargazer(mtcars, 
          type = "latex",
          summary = T,
          title = "Descriptive Statistics")
```

## `modelsummary`

- `modelsummary` is a more modern and flexible package for exporting tables to \LaTeX
  - It is particularly useful for exporting regression tables
  - Exports to a larger amount of formats, including HTML, Word, and Markdown
  - It is also more flexible than `stargazer`
  - Can do summary statistics with `datasummary`

- Check the author's [GitHub page](https://vincentarelbundock.github.io/modelsummary/) for more information
  - Includes awesome vignettes and documentation!

## `modelsummary::datasummary`

- `datasummary` has a wide range of possibilities, you can see the vignettes [here](https://modelsummary.com/vignettes/datasummary.html).
  - `datasummary_skim` produces quick summary statistics
  - `datasummary_balance` specifically works for "balance tables"
  - `datasummary` is the most general function, and it can be used for a wide range of tables

## An example with `modelsummary::datasummary_skim` 

```{r}
#| label: datasummary_skim
#| results: false
library(modelsummary)
data(mtcars)

# skim datasummary of all variables in mtcars, non-numeric variables are ignored

datasummary_skim(mtcars)
```

## An example with `modelsummary::datasummary_skim`

```{r}
#| label: datasummary_skim_display
#| echo: false
#| results: asis
library(modelsummary)
datasummary_skim(mtcars |> select(-cyl, -vs, -am, -gear, -carb))
```

## The formula syntax in `datasummary`

- `datasummary` requires a formula (like that in `lm`) to work
  - This allows for amazing flexibility

- For instance, if we want to report the mean of `mpg`, we can use the following formula: `mpg ~ Mean`
  - Mean is the special `mean` function in `datasummary`, which is just `mean(x, na.rm = TRUE)`
  - Others available are `Median`, `SD`, `N`, among others

- To do more statistics, sum them to the LHS of the formula
  - to add groups, use the nesting operator `*` in the RHS of the formula

## An example with `modelsummary::datasummary`

```{r}
#| label: datasummary

data(mtcars)

datasummary(mpg ~ Mean, data = mtcars)
```

## An example with `modelsummary::datasummary`

```{r}
#| label: datasummary_grouped

datasummary(mpg ~ as.factor(cyl)*(Mean + SD + N), data = mtcars)

```

## Regression tables with `modelsummary`

- `modelsummary` is particularly useful for exporting regression tables to \LaTeX
  - It can export tables from `lm`, `glm`, `feols` and many other packages for modelling

- It is very customizable, and you can add custom statistics, change the formatting, and add notes to the table

- Check the function's [GitHub page](https://modelsummary.com/vignettes/modelsummary.html) for more information

## An example with `modelsummary`

```{r}
#| label: modelsummary1
#| results: false
data(mtcars)
model <- lm(mpg ~ wt + hp, data = mtcars)
modelsummary(model)
```

## An example with `modelsummary`

```{r}
#| label: modelsummary2
#| results: asis
#| echo: false
data(mtcars)
model <- lm(mpg ~ wt + hp, data = mtcars)
modelsummary(model, gof_omit = "BIC|AIC|IC")
```

## `modelsummary` functionality

Among other things, `modelsummary` can:

- Add a custom covariance matrix (adjust the standard errors)
- Add custom statistics (goodness of fit, for instance)
- Change the shape of the table
- Add notes to the table
- Change the formatting of the table (e.g. rounding)
- Titles, subtitles, exponentiation of coefficients, etc. 
- Name titles
- Exporting to HTML, Word, Markdown, and other formats

# The Export Environment in Stata

## Exporting tables from Stata

- Stata can export to multiple formats, including Excel, LaTeX and Word
  - Its output copies easily to Word and Excel (more than R)

- For descriptive statistics, Stata 18's `dtable` command is particularly useful
  - It can export tables to LaTeX, Word, and Excel
  - It is very customizable, and you can add custom statistics, change the formatting, and add notes to the table
  - As an alternative, you can use the `estout` package
  
- Among other methods, the `outreg2` and `esttab` commands are also useful for exporting regression tables to LaTeX.
  - It is also easy to export to Excel by copying and pasting and then using the Excel2LateX add-in. 

- Check `Stata\LaTex` [workflows](https://lukestein.github.io/stata-latex-workflows/) for more info.

## Descriptive statistics: `dtable`

- `dtable` is a new command in Stata 18 that allows you to create publication-quality tables
  - It is particularly useful for exporting descriptive statistics to LaTeX, Word, and Excel
  - It is very customizable, and you can add custom statistics, change the formatting, and add notes to the table
  - See more [here](https://www.stata.com/new-in-stata/create-export-descriptive-statistic-tables/)

## An example with `dtable`

```stata
webuse nhanes2l, clear
dtable age weight bpsystol i.sex i.race, by(diabetes) export(table1.docx, replace)
```

- The `export` option allows you to export the table to a file
  - You can specify the format of the file by changing the file extension
  - The `replace` option allows you to overwrite an existing file
  - you may use `table1.pdf` to export to pdf, also word, excel, latex, etc.
  
- The menu-driven `dtable` is also very useful for creating tables
  - Statistics > Summaries, tables and tests > Table of descriptive statistics

## If you don't have Stata 18 available

- If you don't have Stata 18, `dtable` is not available, but you may use `esttout` (package)
  
- `estout` is a package for exporting regression tables to LaTeX, Word, and Excel
  - It is very customizable, and you can add custom statistics, change the formatting, and add notes to the table
  - It is particularly useful for exporting regression tables to LaTeX
  - Check the package's [GitHub page](https://repec.org/bocode/e/estout/)

## An example with `estout`'s `estpost summarize`

```stata
sysuse auto, clear
estpost sum price mpg weight
esttab using "summary_stats.doc", replace ///
    cells("mean sd min max") ///
    label title("Summary Statistics") ///
    alignment(D) ///
    nomtitles nonumber
```

## Regression tables with `etable`

- `etable` is the new Stata command for exporting regression tables to LaTeX, Word, and Excel
  - Available to version 18 users

- In the menu, Statistics > Summaries, tables and tests > Table of estimation results
  - Works with much more than just regressions

## Regression tables exporting with `estout`

- `estout` is particularly useful for exporting regression tables to LaTeX
  - It can export tables from `reg`, `logit`, `probit`, `ivreg`, and many other packages for modelling
  - It is very customizable, and you can add custom statistics, change the formatting, and add notes to the table
  - Check the package's [GitHub page](https://repec.org/bocode/e/estout/) for more information
  - Outreg2 is another useful package for exporting regression tables to LaTeX

## An example with `estout`

```stata
quietly regress bpsystol age weight i.region // quietly does not give output
estimates store model1
esttab model1 model2 using "outputs/latex_stata_export.tex", replace ///
title("Tabla Regresion") b(%9.3f) se star booktabs
```
## `outreg2`

- Outreg2 is another package for exporting regression results to \LaTeX
  - A bit less used than `estout`, but still very useful

- Some syntax options will be different, but the logic is similar
  - Run the regression
  - Store results with `est store`
  - Export with `outreg2` using the "name" of the stored results
  
## An example with `outreg2`

```stata
quietly regress bpsystol age weight i.region 
est store model1
quietly regress bpsystol age weight 
est store model2
outreg2 [model*] using "outputs/latex_stata_export.tex", replace
```
- Notice that the `*` operator is used to select all stored results that start with `model`

## Further resources

- Stata is a bit clunky for these purposes, yet fortunately plenty of guides have been made to help you
  - A full guide to [dtable](https://fintechprofessor.com/the-complete-guide-to-dtable-in-stata/)
  - A more general guide to Stata, with a focus on earlier versions [here](https://grodri.github.io/stata/index)
  - The [LaTeX/Stata workflows](https://lukestein.github.io/stata-latex-workflows/gallery/)
  - The [Stata to LaTeX](https://medium.com/the-stata-guide/the-stata-to-latex-guide-6e7ed5622856) guide

<!-- # Knitr/Sweave
 -->

<!-- ## Final Comments
 -->
<!-- debugging -->
